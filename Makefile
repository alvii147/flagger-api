GO=go
SRC=./...

FLAGGERAPI_POSTGRES_HOSTNAME ?= localhost
FLAGGERAPI_POSTGRES_PORT ?= 5432
FLAGGERAPI_POSTGRES_USERNAME ?= postgres
FLAGGERAPI_POSTGRES_PASSWORD ?= postgres
FLAGGERAPI_POSTGRES_DATABASE_NAME ?= flaggerdb

DOCKER_POSTGRES_CONTAINER=flagger-api-postgres
DOCKER_SERVER_CONTAINER=flagger-api-server

PSQL=psql --username=$(FLAGGERAPI_POSTGRES_USERNAME) --host=$(FLAGGERAPI_POSTGRES_HOSTNAME) --port=$(FLAGGERAPI_POSTGRES_PORT)
DOCKER_EXEC_PSQL=docker exec --env PGPASSWORD=$(FLAGGERAPI_POSTGRES_PASSWORD) $(DOCKER_POSTGRES_CONTAINER) $(PSQL)
DOCKER_EXEC_TEST=docker exec --env FLAGGERAPI_POSTGRES_DATABASE_NAME=test_$(FLAGGERAPI_POSTGRES_DATABASE_NAME) --env FLAGGERAPI_MAIL_CLIENT_TYPE=inmem $(DOCKER_SERVER_CONTAINER) $(GO) test

TEST_OPTS=-coverprofile coverage.out
ifdef REGEX
	TEST_OPTS=-run $(REGEX)
endif

ifeq ($(VERBOSE), 1)
	TEST_OPTS:=$(TEST_OPTS) -v
endif

.PHONY: test
test:
	$(DOCKER_EXEC_PSQL) --command="CREATE DATABASE test_$(FLAGGERAPI_POSTGRES_DATABASE_NAME);"
	$(DOCKER_EXEC_PSQL) --dbname=test_$(FLAGGERAPI_POSTGRES_DATABASE_NAME) --file=/docker-entrypoint-initdb.d/create_tables.sql
	-$(DOCKER_EXEC_TEST) $(TEST_OPTS) $(SRC)
	$(DOCKER_EXEC_PSQL) --command="DROP DATABASE test_$(FLAGGERAPI_POSTGRES_DATABASE_NAME);"

.PHONY: cover
cover: test
	docker exec $(DOCKER_SERVER_CONTAINER) $(GO) tool cover -func coverage.out
